import flatMap from 'lodash/flatMap'
import multipleLanguageCountry from '@/common/maps/autogenerated/multiple-lang-country'
import fs from 'fs-extra'
import postcodes from '@/common/maps/postcode-patterns'
import glob from 'glob-promise'
import currencies from '@/common/maps/currencies'
import cookieStatementLinks from '@/common/maps/cookie-links'
import googleVerificationCodes from '@/common/maps/google-verification-codes'

import { getLocaleDataByHost } from '@/helpers/getLocaleDataByHost'

const FALLBACK_LOCALE = 'en-US'

export default async ({ store, req, redirect }) => {
  if (req) {
    const { host } = req.headers
    const isHostWithMultipleLangs = checkHostForMultipleLocales(host)

    isHostWithMultipleLangs &&
      redirect({
        name: 'landing-country_code',
        params: {
          country_code: getCurrentCountryCode(host).toLowerCase()
        }
      })

    await store.dispatch('detectLocale', getLocaleDataByHost(store.getters['getHost']))
    const localeStringData = await getLocaleStrings(store.getters['getLocale'])
    await store.dispatch('fetchLocalizedStrings', localeStringData)
  }
}


async function getLocaleStrings (locale) {
  let localeData = null
  let jsonFiles = []

  try {
    // use glob-promise package to support getting file name using wildcard *
    jsonFiles = await glob('./src/common/locales/' + mapToCorrectLocale(locale) + '.json')
    // there is always only one file for FR, DE or NL translation
    localeData = await fs.readJson(jsonFiles[0])
  } catch (e) {
    localeData = await fs.readJson('./src/common/locales/' + FALLBACK_LOCALE + '.json')
  }

  localeData = Object.assign(localeData, {
    currency: currencies[locale],
    regex: { post_code_pattern: postcodes[locale] },
    cookie_banner: {
      ...localeData.cookie_banner,
      privacy_and_cookie_statement_link: cookieStatementLinks[locale]
    },
    googleVerificationCode: googleVerificationCodes[locale]
  })

  return localeData
}

function getCurrentCountryCode (host) {
  return host.split('.').pop()
}

function checkHostForMultipleLocales (host) {
  const multipleLocales = Object.keys(multipleLanguageCountry)
  const currentDomain = getCurrentCountryCode(host).toUpperCase()
  const getLocalesByDomain = multipleLanguageCountry[currentDomain]

  if (getLocalesByDomain) {
    const getHostsForCurrentLocale = flatMap(Object.keys(getLocalesByDomain).map(locale => getLocalesByDomain[locale]['domains']))

    return multipleLocales.includes(currentDomain) && !getHostsForCurrentLocale.includes(host)
  }
}


function mapToCorrectLocale (locale) {
  const firstCode = locale.split('-')[0]
  // locales that can be used for multiple stores
  const multiLocales = []

  // if current locale belongs to the set of the multi-store locales
  return multiLocales.includes(firstCode) ? firstCode + '-*' : locale
}
